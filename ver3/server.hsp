#packopt name "reversi_server"

#include "pcbnet2.as"
randomize

onexit *exit
screen 0,,,, 0, 0
//gsel 0, 2
#define MAX_CLIENTS 20

//初期化
init

//ソケット作成
repeat
    tcpmake listenID, port
    if(stat != 0){
        dialog "ソケット作成に失敗しました。\nもう一度作成しますか？", 2
        if(stat == 6) : continue
        end
    }
    break
loop

//メイン
repeat
    tcpwait listenID
    if(stat != 0) : gosub *accept

    repeat MAX_CLIENTS
        n = cnt
        sockID = sockIDs(n)
        if(sockID = 0) : continue
        repeat
            tcpget command, 1024, sockID
            if(stat == 0) : break
            gosub *run_command
        loop

        tcpfail sockID
        if(stat != 0) : gosub *disconnect
        wait 1
    loop
    gosub *printstat
    wait 1
loop
*exit
    tcpclose listenID
end

*accept
    tcpaccept sockID, listenID
    t = 0
    repeat MAX_CLIENTS
        if(sockIDs(cnt) == 0){
            t = 1
            sockIDs(cnt) = sockID
            tcpinfo client_info(cnt), sockID
            break
        }
    loop

    if(t == 0){//満タンなら閉じる
        tcpclose sockID
    }
    Player_num ++
return

*run_command//メッセージを受け取ったらコマンドを実行する
    wait 1
    title "" + command
    size = 0
    command_first = ""
    command_second = ""
    getstr command_first, command, 0, ' '
    size += strsize
    getstr command_second, command, size, ' '
    size += strsize

    switch command_first
        case "SetName"
            client_name(n) = command_second
        swbreak
        case "NowPlayer"
            match_stat(n) = 1

            repeat MAX_CLIENTS
                i = cnt
                if(i == n) : continue
                if(match_stat(i) == 1){
                    match_stat(n) = 2
                    match_stat(i) = 2

                    match_graph(n) = i
                    match_graph(i) = n

                    if(rnd(2) == 0){
                        tcpput "Matched " + client_name(n) + " 1", sockIDs(i)
                        tcpput "Matched " + client_name(i) + " 2", sockIDs(n)
                    }else{
                        tcpput "Matched " + client_name(n) + " 2", sockIDs(i)
                        tcpput "Matched " + client_name(i) + " 1", sockIDs(n)
                    }

                    break
                }
            loop

            if(match_stat(n) == 1) : tcpput "NowPlayer " + Player_num + " ", sockID
        swbreak
        case "Move"
            tcpput "Move " + command_second, sockIDs(match_graph(n))
        swbreak
        case "EndGame"
            match_stat(match_graph(n)) = 0
            match_stat(n) = 0
        swbreak
    swend
return

*re_send_message
    wait 1
    tcpput latest_message(n) ,sockIDs(n)
return

*disconnect
    tcpclose sockID

    if(match_stat(match_graph(n)) == 2) : tcpput "OpponentDisconected", sockIDs(match_graph(n))
    match_stat(n) = 0
    match_graph(n) = 0
    Player_num --
    sockIDs(n) = 0
return

*printstat
    redraw 0
        color 255,255, 255 : boxf
        color 51, 51, 51 : pos 0, 0
        repeat MAX_CLIENTS
            if(sockIDs(cnt) == 0){
                mes "" + cnt + " : <waiting> "
            }else{
                mes "" + cnt + " : " + client_name(cnt)
            }
        loop
    redraw 1
return

#deffunc init
    set_address

    Player_num = 0
    dim sockIDs, MAX_CLIENTS
    sdim client_info, 1024, MAX_CLIENTS
    sdim client_name, 1024, MAX_CLIENTS

    dim match_stat, MAX_CLIENTS
    dim match_graph, MAX_CLIENTS

    sdim message, 1024
    sdim command, 1024
    sdim Latest_command, 1024, MAX_CLIENTS
    sdim latest_message, 1024, MAX_CLIENTS

    dim timer, MAX_CLIENTS

    dim JoinOK_flag, MAX_CLIENTS
return

#deffunc set_address
    address_txt = ""
    notesel address_txt
    noteload "address"
    noteget port, 1
    port = int(port)
return