#include "pcbnet2.as"
celload "image.png", 1 : celdiv 1, 100

screen 0,,,, ginfo_dispx / 2
//gsel 0, 2
onexit *exit

command = ""
message = ""
matching_wait = 0
set_address

//ソケット作成
repeat
    tcpopen sockID, address, port
    if(stat != 0){
        dialog "ソケット作成に失敗しました。\nもう一度作成しますか？", 2
        if(stat == 6) : continue
        end
    }
    break
loop

//接続確認
repeat
    tcpiscon sockID
    if(stat == 1){
        mes "接続しました"
        button gosub "マッチ", *make_match

        //接続したら、UserIDをもらう。
        break
    }else:if(stat > 1){
        dialog "接続に失敗しました", 1 : goto *exit
    }
    wait 1
loop


//メイン関数
repeat
    title "" + cnt
    //接続し続けているかの確認
    tcpfail sockID
    if(stat != 0){
        dialog "接続が切断されました", 1 : goto *exit
    }

    //サーバからのメッセージを確認
    tcpget message, 1024, sockID
    if(stat != 0){
        gosub *receive_message
    }
    wait 1
loop
stop

*make_match
    cls
    command = "JoinMatch"
    gosub *send_command
return

*send_command
    tcpput command, sockID
return

*receive_message
    mes command + " " + message + " " + myturn

    if(myturn == 0){//マッチング
        switch message
            case "MakingMatch"
                if(matching_wait != 1) : mes "対戦相手を探しています"
                matching_wait = 1

                gosub *return_send_OK
            swbreak
            case "MakedMatch"
                if(matching_wait != 2) : mes "対戦相手が見つかりました"
                matching_wait = 2
                wait 1

                command = "JoinOK"
                gosub *send_command
            swbreak
            case "First"
                myturn = 1
                mes "あなたは「くろ」です"

                title "あなたは「くろ」です"
                gosub *return_send_OK

                game
            swbreak
            case "Second"
                myturn = 2
                mes "あなたは「しろ」です"

                title "あなたは「しろ」です"
                gosub *return_send_OK

                game

                
            swbreak
        swend
    }else{//ゲーム中
        in = int(message)
        inx = in \ 10
        iny = in / 10

        gosub *return_send_OK
    }

    if(message == "NonPlayer"){
        
        dialog "相手が切断しました\nあなたの勝利です"
        cls
        button gosub "マッチ", *make_match
        myturn = 0
    }
return

*return_send_OK
    wait 1
    tcpput "OK", sockID
return
stop

*exit
    tcpclose sockID
end

#deffunc set_address
    address_txt = ""
    notesel address_txt
    noteload "address"
    noteget address, 0
    noteget port, 1
    port = int(port)
return

#deffunc init_riversi
    dim grid, 8, 8
    grid(3, 3) = 2//白
    grid(4, 4) = 2//白
    grid(4, 3) = 1//黒
    grid(3, 4) = 1//黒

    dx = 1, 0, -1, 0, 1, 1, -1, -1
    dy = 0, 1, 0, -1, -1, 1, -1, 1

    turn = 1
    black = 2
    white = 2
return
#deffunc print_field
    redraw 0
        repeat 8
            x = cnt
            repeat 8
                y = cnt
                pos x * 100, y * 100
                celput 1, grid(x, y), 1.0, 1.0
                //pos x * 100 + 10, y * 100 + 10
                //mes can_grid(x, y)
                if(myturn != turn && grid(x, y) == 3){
                    pos x * 100, y * 100
                    celput 1, 0, 1.0, 1.0
                }
            loop
        loop
    redraw 1
return
#deffunc check
    dim can, 8, 8, 8
    dim can_grid, 8, 8
    can_num = 0

    //候補の削除
    repeat 8
        i = cnt
        repeat 8
            j = cnt
            if(grid(i, j) == 3):grid(i, j) = 0
        loop
    loop
    repeat 8
        x = cnt
        repeat 8
            y = cnt
            if(grid(x, y) == 0){
                repeat 8
                    i = cnt
                    nextx = x + dx(i)
                    nexty = y + dy(i)
                    if(0 > nextx or nextx > 7 or 0 > nexty or nexty > 7):continue
                    if(grid(nextx, nexty) == turn \ 2 + 1){
                        repeat 8
                            j = cnt + 2
                            nextx = x + dx(i) * j
                            nexty = y + dy(i) * j
                            if(0 > nextx or nextx > 7 or 0 > nexty or nexty > 7):break
                            if(grid(nextx, nexty) == turn){
                                grid(x, y) = 3
                                can(x, y, i) += j - 1
                                can_grid(x, y) += j - 1
                                can_num++
                                break
                            }
                            if(grid(nextx, nexty) == 0 or grid(nextx, nexty) == 3):break
                        loop
                    }
                loop
            }
        loop
    loop
return

#deffunc put//0=自分でどっちもおく。 //1=黒 //-1=白
    if(myturn == turn){//自分のターンが回ってきたら
        repeat
            tcpget message, 1024, sockID
            if(stat != 0){
                gosub *receive_message
            }
            stick key

            if(key == 256){
                inx = mousex / 100
                iny = mousey / 100

                if(0 > inx or inx > 7 or 0 > iny or iny > 7):continue
                if(grid(inx, iny) == 3){

                    wait 1
                    command = "" + (iny * 10 + inx)
                    gosub *send_command
                    repeat 8
                        i = cnt
                        repeat can(inx, iny, i)
                            j = cnt + 1
                            grid(inx + dx(i) * j, iny + dy(i) * j) = turn
                        loop
                        grid(inx, iny) = turn
                    loop

                    if(turn == 1){
                        black += can_grid(inx, iny) + 1
                        white -= can_grid(inx, iny) 
                    }else:if(turn == 2){
                        black -= can_grid(inx, iny)
                        white += can_grid(inx, iny) + 1
                    }
                    break
                }
            }
            await
        loop
    }else{//相手のターンだったら。
        //ここで置く場所をサーバからもらう。
        repeat
            //接続し続けているかの確認
            tcpfail sockID
            if(stat != 0){
                dialog "接続が切断されました", 1 : goto *exit
            }

            //サーバからのメッセージを確認
            tcpget message, 1024, sockID
            if(stat != 0){
                gosub *receive_message
            }

            if(0 > inx or inx > 7 or 0 > iny or iny > 7):continue
            if(grid(inx, iny) == 3){
                repeat 8
                    i = cnt
                    repeat can(inx, iny, i)
                        j = cnt + 1
                        grid(inx + dx(i) * j, iny + dy(i) * j) = turn
                    loop
                    grid(inx, iny) = turn
                loop

                if(turn == 1){
                    black += can_grid(inx, iny) + 1
                    white -= can_grid(inx, iny) 
                }else:if(turn == 2){
                    black -= can_grid(inx, iny)
                    white += can_grid(inx, iny) + 1
                }
                break
            }
            await
        loop
    }
return

#deffunc game
    screen 0, 800, 800
    init_riversi
    repeat
        check
        if(can_num == 0){
            turn = turn \ 2 + 1
            check
            if(can_num == 0){
                break
            }else{
                print_field
                if(turn == myturn) : //dialog "あなたのターンです"
                put
                turn = turn \ 2 + 1
            }
        }else{
            print_field
            if(turn == myturn) : //dialog "あなたのターンです"
            put
            turn = turn \ 2 + 1
        }
        print_field
        await
    loop
    print_field

    if(black == white){
        dialog "黒:" + black + " 白:" + white + "\n引き分けです。"
    }else:if(black > white){
        dialog "黒:" + black + " 白:" + white + "\n黒の勝ちです"
    }else{
        dialog "黒:" + black + " 白:" + white + "\n白の勝ちです"
    }
    
    command = "FinishGame"
    gosub *send_command

    cls
    button gosub "マッチ", *make_match
    myturn = 0
return